#!/bin/bash
# ContentMind Platform - Pre-Push Hook  
# 代码推送前完整检查脚本

set -e

remote="$1"
url="$2"

echo "🚀 ContentMind Platform - 代码推送前检查开始..."
echo "=============================================="
echo "📡 推送目标: $remote ($url)"

# 获取当前分支
BRANCH_NAME=$(git branch --show-current)
echo "🌿 当前分支: $BRANCH_NAME"

# 获取待推送的提交
LOCAL_SHA=$(git rev-parse HEAD)
REMOTE_SHA=$(git rev-parse "$remote/$BRANCH_NAME" 2>/dev/null || echo "0000000000000000000000000000000000000000")

if [ "$LOCAL_SHA" = "$REMOTE_SHA" ]; then
    echo "ℹ️  没有新的提交需要推送"
    exit 0
fi

echo "📦 待推送提交:"
git log --oneline "$REMOTE_SHA..$LOCAL_SHA" | head -10
echo ""

# 1. 完整测试套件
echo "🧪 [1/4] 运行完整测试套件..."
echo "   正在清理并重新编译项目..."
if mvn clean compile -q; then
    echo "   ✅ 项目编译成功"
else
    echo "   ❌ 项目编译失败！"
    exit 1
fi

echo "   正在运行所有测试..."
if mvn test -q; then
    TEST_RESULTS=$(mvn surefire-report:report-only -q 2>/dev/null || true)
    echo "   ✅ 所有测试通过"
    
    # 显示测试统计
    if [ -f "target/surefire-reports/TEST-*.xml" ]; then
        TOTAL_TESTS=$(find target/surefire-reports/ -name "TEST-*.xml" -exec grep -h "tests=" {} \; | sed 's/.*tests="\([0-9]*\)".*/\1/' | awk '{sum+=$1} END {print sum}')
        echo "   📊 测试统计: 共执行 $TOTAL_TESTS 个测试用例"
    fi
else
    echo "   ❌ 测试失败！推送终止"
    echo "   💡 请修复失败的测试用例后重试"
    exit 1
fi
echo ""

# 2. 安全漏洞扫描
echo "🔒 [2/4] 安全漏洞扫描..."
echo "   正在检查依赖安全漏洞..."
if mvn org.owasp:dependency-check-maven:check -q; then
    echo "   ✅ 未发现高危安全漏洞"
else
    echo "   ❌ 发现安全漏洞！推送终止"
    echo "   💡 请查看target/dependency-check-report.html并修复漏洞"
    exit 1
fi
echo ""

# 3. 代码质量检查
echo "📊 [3/4] 代码质量检查..."
echo "   正在分析代码质量..."
if mvn spotbugs:check -q; then
    echo "   ✅ 代码质量检查通过"
else
    echo "   ❌ 发现代码质量问题！推送终止"
    echo "   💡 请查看target/spotbugsXml.xml并修复问题"
    exit 1
fi

# 检查测试覆盖率
echo "   正在检查测试覆盖率..."
if mvn jacoco:check -q; then
    # 获取覆盖率数据
    if [ -f "target/site/jacoco/index.html" ]; then
        COVERAGE=$(grep -o 'Total[^%]*[0-9]*%' target/site/jacoco/index.html | tail -1 | grep -o '[0-9]*%' || echo "N/A")
        echo "   ✅ 测试覆盖率: $COVERAGE (达标)"
    else
        echo "   ✅ 测试覆盖率达标"
    fi
else
    echo "   ❌ 测试覆盖率不足！推送终止"
    echo "   💡 请增加测试用例提高覆盖率至80%以上"
    exit 1
fi
echo ""

# 4. 集成测试（可选）
echo "🔗 [4/4] 集成测试..."
if ls src/test/java/**/*IntegrationTest.java 1> /dev/null 2>&1; then
    echo "   发现集成测试，正在执行..."
    if mvn failsafe:integration-test -q; then
        echo "   ✅ 集成测试通过"
    else
        echo "   ⚠️  集成测试失败，但不阻止推送"
        echo "   💡 请检查集成测试环境和配置"
    fi
else
    echo "   ℹ️  未发现集成测试，跳过"
fi
echo ""

# 分支特殊检查
if [[ "$BRANCH_NAME" == "main" ]]; then
    echo "🔴 检测到推送到main分支，执行额外检查..."
    
    # 检查是否通过PR合并
    RECENT_MERGE=$(git log --oneline -1 | grep -i merge || true)
    if [ -z "$RECENT_MERGE" ]; then
        echo "   ⚠️  建议通过Pull Request合并到main分支"
    fi
    
    # 检查版本标签
    LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
    echo "   📋 当前版本标签: $LATEST_TAG"
    
elif [[ "$BRANCH_NAME" == "develop" ]]; then
    echo "🟡 检测到推送到develop分支"
    echo "   💡 确保功能已充分测试"
fi

# 性能检查（可选）
echo ""
echo "⚡ 性能检查..."
JAR_FILE="target/content-mind-platform-1.0.0.jar"
if [ -f "$JAR_FILE" ]; then
    JAR_SIZE=$(du -h "$JAR_FILE" | cut -f1)
    echo "   📦 构建产物大小: $JAR_SIZE"
    
    # 检查JAR文件大小是否合理（警告阈值：100MB）
    JAR_SIZE_BYTES=$(du -b "$JAR_FILE" | cut -f1)
    if [ "$JAR_SIZE_BYTES" -gt 104857600 ]; then
        echo "   ⚠️  JAR文件较大，请检查是否包含不必要的依赖"
    fi
else
    echo "   ℹ️  未找到构建产物，跳过大小检查"
fi

echo ""
echo "=============================================="
echo "🎉 所有检查通过！代码可以推送"
echo "📊 检查摘要:"
echo "   ✅ 编译通过"
echo "   ✅ 测试通过" 
echo "   ✅ 安全扫描通过"
echo "   ✅ 质量检查通过"
echo "   ✅ 覆盖率达标"
echo ""
echo "🚀 正在推送到 $remote..."
echo "⏱️  检查耗时: $(date +'%Y-%m-%d %H:%M:%S')"
echo ""

exit 0